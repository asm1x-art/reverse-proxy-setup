#!/bin/bash

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: bash server-setup.sh your-domain.com your-email@example.com [project_name]

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[‚úì]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[‚ö†]${NC} $1"
}

log_error() {
    echo -e "${RED}[‚úó]${NC} $1"
}

log_step() {
    echo -e "${PURPLE}[STEP]${NC} $1"
}

log_cmd() {
    echo -e "${CYAN}[RUN]${NC} $1"
}

log_skip() {
    echo -e "${CYAN}[SKIP]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
if [ "$#" -lt 2 ] || [ "$#" -gt 3 ]; then
    log_error "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <domain> <email> [project_name]"
    log_error "–ü—Ä–∏–º–µ—Ä: $0 astrum.ac admin@astrum.ac astrum"
    log_error "–ï—Å–ª–∏ project_name –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ"
    exit 1
fi

DOMAIN=$1
EMAIL=$2
PROJECT_NAME=$3

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –æ—Ç root
if [ "$EUID" -ne 0 ]; then
    log_error "–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –æ—Ç root"
    log_info "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo bash $0 $DOMAIN $EMAIL"
    exit 1
fi

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
REAL_USER=${SUDO_USER:-$(who am i | awk '{print $1}')}
if [ -z "$REAL_USER" ]; then
    log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    exit 1
fi

REAL_HOME=$(eval echo ~$REAL_USER)

# –ï—Å–ª–∏ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ
if [ -z "$PROJECT_NAME" ]; then
    echo -e "${CYAN}–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –∫–æ–º–∞–Ω–¥–∞—Ö –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö):${NC}"
    read -p "–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞ [astrum]: " PROJECT_NAME
    PROJECT_NAME=${PROJECT_NAME:-astrum}
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
if [[ ! "$PROJECT_NAME" =~ ^[a-zA-Z0-9_-]+$ ]]; then
    log_error "–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è"
    exit 1
fi

echo -e "${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${PURPLE}‚ïë                    üöÄ –ù–ê–°–¢–†–û–ô–ö–ê –°–ï–†–í–ï–†–ê                     ‚ïë${NC}"
echo -e "${PURPLE}‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£${NC}"
echo -e "${PURPLE}‚ïë${NC} –ü—Ä–æ–µ–∫—Ç: ${CYAN}$PROJECT_NAME${NC}"
echo -e "${PURPLE}‚ïë${NC} –î–æ–º–µ–Ω: ${CYAN}$DOMAIN${NC}"
echo -e "${PURPLE}‚ïë${NC} Email: ${CYAN}$EMAIL${NC}"
echo -e "${PURPLE}‚ïë${NC} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${CYAN}$REAL_USER${NC}"
echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
echo

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä—Å–∏–∏ –ø–∞–∫–µ—Ç–∞
check_version() {
    local package=$1
    local required_version=$2
    local current_version=""
    
    case $package in
        "docker")
            if command -v docker &> /dev/null; then
                current_version=$(docker --version 2>/dev/null | cut -d' ' -f3 | cut -d',' -f1)
            fi
            ;;
        "node")
            if command -v node &> /dev/null; then
                current_version=$(node --version 2>/dev/null | sed 's/v//')
            fi
            ;;
        "nvm")
            if [ -s "$REAL_HOME/.nvm/nvm.sh" ]; then
                current_version="installed"
            fi
            ;;
        "pm2")
            if sudo -u $REAL_USER bash -c "export NVM_DIR=\"$REAL_HOME/.nvm\"; [ -s \"\$NVM_DIR/nvm.sh\" ] && . \"\$NVM_DIR/nvm.sh\"; command -v pm2" &> /dev/null; then
                current_version="installed"
            fi
            ;;
        "yarn")
            if sudo -u $REAL_USER bash -c "export NVM_DIR=\"$REAL_HOME/.nvm\"; [ -s \"\$NVM_DIR/nvm.sh\" ] && . \"\$NVM_DIR/nvm.sh\"; command -v yarn" &> /dev/null; then
                current_version="installed"
            fi
            ;;
        "certbot")
            if command -v certbot &> /dev/null; then
                current_version="installed"
            fi
            ;;
    esac
    
    if [ "$current_version" = "$required_version" ] || ([ "$required_version" = "installed" ] && [ -n "$current_version" ]); then
        return 0
    else
        return 1
    fi
}

# –û–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ç–∫–µ–Ω–¥–∞
log_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±—ç–∫–µ–Ω–¥–∞"
echo
echo -e "${CYAN}–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:${NC}"

read -p "IP –∞–¥—Ä–µ—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: " BACKEND_HOST
read -p "–ü–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ [80]: " BACKEND_PORT
BACKEND_PORT=${BACKEND_PORT:-80}

echo -e "${CYAN}–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É:${NC}"
echo -e "  ${YELLOW}1.${NC} HTTP"
echo -e "  ${YELLOW}2.${NC} HTTPS"
read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2) [1]: " BACKEND_SCHEME_CHOICE
BACKEND_SCHEME_CHOICE=${BACKEND_SCHEME_CHOICE:-1}

case $BACKEND_SCHEME_CHOICE in
    2)
        BACKEND_SCHEME="https"
        ;;
    *)
        BACKEND_SCHEME="http"
        ;;
esac

log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ç–∫–µ–Ω–¥–∞:"
log_info "  –•–æ—Å—Ç: $BACKEND_HOST"
log_info "  –ü–æ—Ä—Ç: $BACKEND_PORT"  
log_info "  –ü—Ä–æ—Ç–æ–∫–æ–ª: $BACKEND_SCHEME"
log_info "  SSL Name: $DOMAIN"
echo

# 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É
log_step "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"
log_cmd "apt update && apt upgrade -y"
apt update && apt upgrade -y > /dev/null 2>&1
log_success "–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"

# 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã
log_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"
log_cmd "apt install –±–∞–∑–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã..."
apt install -y \
    curl \
    wget \
    git \
    htop \
    nano \
    unzip \
    software-properties-common \
    apt-transport-https \
    ca-certificates \
    gnupg \
    lsb-release \
    ufw \
    build-essential > /dev/null 2>&1

log_success "–ë–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

# 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞
log_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞"
log_cmd "ufw –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä—Ç–æ–≤..."
ufw --force reset > /dev/null 2>&1
ufw default deny incoming > /dev/null 2>&1
ufw default allow outgoing > /dev/null 2>&1
ufw allow ssh > /dev/null 2>&1
ufw allow 80/tcp > /dev/null 2>&1
ufw allow 443/tcp > /dev/null 2>&1
ufw --force enable > /dev/null 2>&1
log_success "–§–∞–π—Ä–≤–æ–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω (SSH, HTTP, HTTPS)"

# 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker
log_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker"
if check_version "docker" "installed"; then
    DOCKER_VERSION=$(docker --version | cut -d' ' -f3 | cut -d',' -f1)
    log_skip "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤–µ—Ä—Å–∏—è: $DOCKER_VERSION)"
else
    log_cmd "–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π..."
    apt remove -y docker docker-engine docker.io containerd runc > /dev/null 2>&1 || true

    log_cmd "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Docker GPG –∫–ª—é—á–∞..."
    # –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

    log_cmd "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ Docker —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

    log_cmd "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
    apt update > /dev/null 2>&1
    apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin > /dev/null 2>&1

    log_cmd "–ó–∞–ø—É—Å–∫ Docker..."
    systemctl enable docker > /dev/null 2>&1
    systemctl start docker > /dev/null 2>&1

    log_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω"
fi

# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
usermod -aG docker $REAL_USER
log_info "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $REAL_USER –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É docker"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏–∏
DOCKER_VERSION=$(docker --version | cut -d' ' -f3 | cut -d',' -f1)
COMPOSE_VERSION=$(docker compose version | cut -d' ' -f4)
log_info "Docker: $DOCKER_VERSION, Compose: $COMPOSE_VERSION"

# 5. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º NVM –∏ Node.js
log_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ NVM –∏ Node.js"
TARGET_NODE_VERSION="22.17.0"

if check_version "nvm" "installed" && check_version "node" "$TARGET_NODE_VERSION"; then
    log_skip "NVM –∏ Node.js $TARGET_NODE_VERSION —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
else
    if ! check_version "nvm" "installed"; then
        log_cmd "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ NVM..."
        sudo -u $REAL_USER bash -c "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash"
        sleep 2
    else
        log_skip "NVM —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi

    if ! check_version "node" "$TARGET_NODE_VERSION"; then
        log_cmd "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js $TARGET_NODE_VERSION..."
        sudo -u $REAL_USER bash -c "
        export NVM_DIR=\"$REAL_HOME/.nvm\"
        [ -s \"\$NVM_DIR/nvm.sh\" ] && \. \"\$NVM_DIR/nvm.sh\"
        nvm install $TARGET_NODE_VERSION
        nvm use $TARGET_NODE_VERSION
        nvm alias default $TARGET_NODE_VERSION
        "
    else
        log_skip "Node.js $TARGET_NODE_VERSION —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
PACKAGES_TO_INSTALL=()

if ! check_version "pm2" "installed"; then
    PACKAGES_TO_INSTALL+=("pm2")
fi

if ! check_version "yarn" "installed"; then
    PACKAGES_TO_INSTALL+=("yarn")
fi

if [ ${#PACKAGES_TO_INSTALL[@]} -gt 0 ]; then
    log_cmd "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: ${PACKAGES_TO_INSTALL[*]}"
    sudo -u $REAL_USER bash -c "
    export NVM_DIR=\"$REAL_HOME/.nvm\"
    [ -s \"\$NVM_DIR/nvm.sh\" ] && \. \"\$NVM_DIR/nvm.sh\"
    npm install -g ${PACKAGES_TO_INSTALL[*]}
    "
else
    log_skip "PM2 –∏ Yarn —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
fi

log_success "NVM, Node.js $TARGET_NODE_VERSION, PM2 –∏ Yarn –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ"

# 6. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Certbot
log_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Certbot"
if check_version "certbot" "installed"; then
    log_skip "Certbot —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
else
    log_cmd "snap install certbot..."
    snap install core > /dev/null 2>&1
    snap refresh core > /dev/null 2>&1
    snap install --classic certbot > /dev/null 2>&1
    ln -sf /snap/bin/certbot /usr/bin/certbot
    log_success "Certbot —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# 7. –ü–æ–ª—É—á–∞–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
log_step "–ü–æ–ª—É—á–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
CERT_PATH="/etc/letsencrypt/live/$DOMAIN"
if [ -d "$CERT_PATH" ] && [ -f "$CERT_PATH/fullchain.pem" ] && [ -f "$CERT_PATH/privkey.pem" ]; then
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    CERT_EXPIRY=$(openssl x509 -enddate -noout -in "$CERT_PATH/fullchain.pem" | cut -d= -f2)
    CERT_EXPIRY_TIMESTAMP=$(date -d "$CERT_EXPIRY" +%s)
    CURRENT_TIMESTAMP=$(date +%s)
    DAYS_UNTIL_EXPIRY=$(( (CERT_EXPIRY_TIMESTAMP - CURRENT_TIMESTAMP) / 86400 ))
    
    if [ $DAYS_UNTIL_EXPIRY -gt 30 ]; then
        log_skip "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è $DOMAIN —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –µ—â–µ $DAYS_UNTIL_EXPIRY –¥–Ω–µ–π"
        CERT_EXISTS=true
    else
        log_warning "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ $DAYS_UNTIL_EXPIRY –¥–Ω–µ–π, –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π"
        CERT_EXISTS=false
    fi
else
    CERT_EXISTS=false
fi

if [ "$CERT_EXISTS" = false ]; then
    echo -e "${CYAN}–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:${NC}"
    echo -e "  ${YELLOW}1.${NC} –û–±—ã—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (—Ç–æ–ª—å–∫–æ $DOMAIN –∏ www.$DOMAIN)"
    echo -e "  ${YELLOW}2.${NC} Wildcard —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (*.$DOMAIN - –≤—Å–µ –ø–æ–¥–¥–æ–º–µ–Ω—ã)"
    echo

    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2): " CERT_TYPE

    case $CERT_TYPE in
        1)
            log_info "–ü–æ–ª—É—á–∞–µ–º –æ–±—ã—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è $DOMAIN"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π IP —Å–µ—Ä–≤–µ—Ä–∞
            SERVER_IP=$(curl -s ifconfig.me || curl -s ipinfo.io/ip || echo "–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å")
            log_info "IP —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: $SERVER_IP"
            echo
            
            log_warning "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ $DOMAIN —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ IP $SERVER_IP"
            read -p "–ù–∞–∂–º–∏—Ç–µ Enter –µ—Å–ª–∏ DNS –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏–ª–∏ Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã..."
            
            log_cmd "certbot standalone –¥–ª—è $DOMAIN..."
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç–∞—Ö 80/443
            fuser -k 80/tcp > /dev/null 2>&1 || true
            fuser -k 443/tcp > /dev/null 2>&1 || true
            
            certbot certonly \
                --standalone \
                --email $EMAIL \
                --agree-tos \
                --no-eff-email \
                -d $DOMAIN \
                -d www.$DOMAIN
            ;;
            
        2)
            log_info "–ü–æ–ª—É—á–∞–µ–º wildcard —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è *.$DOMAIN"
            log_warning "–ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å TXT –∑–∞–ø–∏—Å–∏ –≤ DNS!"
            echo
            
            log_info "–ü—Ä–æ—Ü–µ—Å—Å:"
            log_info "1. Certbot –ø–æ–∫–∞–∂–µ—Ç TXT –∑–∞–ø–∏—Å—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ DNS"
            log_info "2. –î–æ–±–∞–≤—å—Ç–µ –∑–∞–ø–∏—Å—å _acme-challenge.$DOMAIN –≤ –≤–∞—à–µ–π DNS –ø–∞–Ω–µ–ª–∏"
            log_info "3. –ü–æ–¥–æ–∂–¥–∏—Ç–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è DNS (–¥–æ 10 –º–∏–Ω—É—Ç)"
            log_info "4. –ù–∞–∂–º–∏—Ç–µ Enter –≤ certbot –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
            echo
            
            read -p "–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " READY
            if [[ ! $READY =~ ^[Yy]$ ]]; then
                log_warning "–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
                log_info "–ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∑–∂–µ: certbot certonly --manual --preferred-challenges dns -d $DOMAIN -d '*.$DOMAIN'"
                exit 0
            fi
            
            log_cmd "certbot DNS challenge –¥–ª—è *.$DOMAIN..."
            
            certbot certonly \
                --manual \
                --preferred-challenges dns \
                --email $EMAIL \
                --agree-tos \
                --no-eff-email \
                -d $DOMAIN \
                -d "*.$DOMAIN"
            ;;
            
        *)
            log_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∑–∞–Ω–æ–≤–æ."
            exit 1
            ;;
    esac

    if [ $? -eq 0 ]; then
        log_success "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–ª—É—á–µ–Ω –¥–ª—è $DOMAIN"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏
        if [ "$CERT_TYPE" = "1" ]; then
            log_info "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è: $DOMAIN, www.$DOMAIN"
        else
            log_info "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è: $DOMAIN, *.$DOMAIN (–≤—Å–µ –ø–æ–¥–¥–æ–º–µ–Ω—ã)"
        fi
    else
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"
        
        if [ "$CERT_TYPE" = "1" ]; then
            log_warning "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ $DOMAIN —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä"
        else
            log_warning "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ DNS TXT –∑–∞–ø–∏—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
            log_info "–ó–∞–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å: _acme-challenge.$DOMAIN"
        fi
        
        log_info "–ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–∑–∂–µ –≤—Ä—É—á–Ω—É—é"
        exit 1
    fi
fi

# 8. –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
log_step "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–æ–µ–∫—Ç–æ–≤"
log_cmd "mkdir -p /opt/$PROJECT_NAME /opt/$PROJECT_NAME-api"
mkdir -p "/opt/$PROJECT_NAME" "/opt/$PROJECT_NAME-api"
chown -R $REAL_USER:$REAL_USER "/opt/$PROJECT_NAME" "/opt/$PROJECT_NAME-api"
log_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /opt/$PROJECT_NAME –∏ /opt/$PROJECT_NAME-api —Å–æ–∑–¥–∞–Ω—ã"

# 9. –ö–æ–ø–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏—Ö
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Nginx reverse proxy
if [ -d "$SCRIPT_DIR/nginx-reverse" ]; then
    log_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx reverse proxy"
    log_cmd "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ nginx-reverse –≤ /opt/$PROJECT_NAME"
    
    # –û—á–∏—â–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
    if [ "$(ls -A /opt/$PROJECT_NAME 2>/dev/null)" ]; then
        log_cmd "–û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ /opt/$PROJECT_NAME"
        rm -rf "/opt/$PROJECT_NAME/"*
    fi
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    cp -r "$SCRIPT_DIR/nginx-reverse/"* "/opt/$PROJECT_NAME/"
    chown -R $REAL_USER:$REAL_USER "/opt/$PROJECT_NAME"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ docker-compose —Ñ–∞–π–ª–æ–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
    log_cmd "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ docker-compose"
    cd "/opt/$PROJECT_NAME"
    
    # –ò—â–µ–º —Ñ–∞–π–ª docker-compose
    COMPOSE_FILE=""
    if [ -f "docker-compose.yml" ]; then
        COMPOSE_FILE="docker-compose.yml"
    elif [ -f "docker-compose.yaml" ]; then
        COMPOSE_FILE="docker-compose.yaml"
    else
        log_error "–§–∞–π–ª docker-compose.yml –∏–ª–∏ docker-compose.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ nginx-reverse"
        log_warning "–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É reverse proxy"
    fi
    
    if [ -n "$COMPOSE_FILE" ]; then
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        cp "$COMPOSE_FILE" "$COMPOSE_FILE.backup"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        sed -e "s|BACKEND_HOST=.*|BACKEND_HOST=$BACKEND_HOST|" \
            -e "s|BACKEND_PORT=.*|BACKEND_PORT=$BACKEND_PORT|" \
            -e "s|BACKEND_SCHEME=.*|BACKEND_SCHEME=$BACKEND_SCHEME|" \
            -e "s|BACKEND_SSL_NAME=.*|BACKEND_SSL_NAME=$DOMAIN|" \
            -e "s|/etc/letsencrypt/live/[^/]*/|/etc/letsencrypt/live/$DOMAIN/|g" \
            "$COMPOSE_FILE" > "$COMPOSE_FILE.tmp" && mv "$COMPOSE_FILE.tmp" "$COMPOSE_FILE"
        
        log_cmd "–ó–∞–ø—É—Å–∫ $PROJECT_NAME start..."
        if sudo -u $REAL_USER bash -c "cd /opt/$PROJECT_NAME && docker compose up -d"; then
            log_success "Nginx reverse proxy –∑–∞–ø—É—â–µ–Ω"
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ ClickHouse
            log_cmd "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ ClickHouse..."
            sleep 10
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –∏ —Ç–∞–±–ª–∏—Ü—É –≤ ClickHouse
            log_cmd "–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –∏ —Ç–∞–±–ª–∏—Ü—ã –≤ ClickHouse..."
            if docker exec -i clickhouse-server clickhouse-client --query "
            CREATE DATABASE IF NOT EXISTS logs_db;

            CREATE TABLE IF NOT EXISTS logs_db.request_logs
            (
                request_id String,
                user String,
                ip String,
                host String,
                uri String,
                method String,
                args String,
                body Nullable(String),
                time DateTime
            ) 
            ENGINE = MergeTree()
            ORDER BY (time, ip, host)
            PARTITION BY toYYYYMM(time)
            TTL time + INTERVAL 30 DAY;
            " 2>/dev/null; then
                log_success "ClickHouse –±–∞–∑–∞ –∏ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω—ã"
            else
                log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É ClickHouse —Å–µ–π—á–∞—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∫–æ–º–∞–Ω–¥–æ–π:"
                log_info "$PROJECT_NAME-db create-table"
            fi
        else
            log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å nginx reverse proxy"
            log_warning "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker compose logs -f"
        fi
    fi
else
    log_warning "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è nginx-reverse –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º"
fi

# API –ø—Ä–æ–µ–∫—Ç
if [ -d "$SCRIPT_DIR/nginx-api" ]; then
    log_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –ø—Ä–æ–µ–∫—Ç–∞"
    log_cmd "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ nginx-api –≤ /opt/$PROJECT_NAME-api"
    
    # –û—á–∏—â–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è (–∫—Ä–æ–º–µ node_modules –∏ dist)
    if [ "$(ls -A /opt/$PROJECT_NAME-api 2>/dev/null)" ]; then
        log_cmd "–û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ /opt/$PROJECT_NAME-api (—Å–æ—Ö—Ä–∞–Ω—è–µ–º node_modules –∏ dist)"
        find "/opt/$PROJECT_NAME-api" -mindepth 1 -maxdepth 1 ! -name 'node_modules' ! -name 'dist' ! -name '.yarn' -exec rm -rf {} + 2>/dev/null || true
    fi
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    cp -r "$SCRIPT_DIR/nginx-api/"* "/opt/$PROJECT_NAME-api/"
    chown -R $REAL_USER:$REAL_USER "/opt/$PROJECT_NAME-api"
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    log_cmd "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    if sudo -u $REAL_USER bash -c "
    export NVM_DIR=\"$REAL_HOME/.nvm\"
    [ -s \"\$NVM_DIR/nvm.sh\" ] && \. \"\$NVM_DIR/nvm.sh\"
    cd /opt/$PROJECT_NAME-api
    yarn install
    " 2>/dev/null; then
        log_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        
        # –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        log_cmd "–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
        if sudo -u $REAL_USER bash -c "
        export NVM_DIR=\"$REAL_HOME/.nvm\"
        [ -s \"\$NVM_DIR/nvm.sh\" ] && \. \"\$NVM_DIR/nvm.sh\"
        cd /opt/$PROJECT_NAME-api
        yarn build
        " 2>/dev/null; then
            log_success "–ü—Ä–æ–µ–∫—Ç —Å–æ–±—Ä–∞–Ω"
            
            # –ó–∞–ø—É—Å–∫ API —á–µ—Ä–µ–∑ PM2 —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            log_cmd "–ó–∞–ø—É—Å–∫ API —á–µ—Ä–µ–∑ PM2..."
            if sudo -u $REAL_USER bash -c "
            export NVM_DIR=\"$REAL_HOME/.nvm\"
            [ -s \"\$NVM_DIR/nvm.sh\" ] && \. \"\$NVM_DIR/nvm.sh\"
            cd /opt/$PROJECT_NAME-api
            pm2 start ecosystem.config.js 2>/dev/null || pm2 start --name $PROJECT_NAME-api yarn -- start --host 127.0.0.1 --port 15000
            pm2 save
            " 2>/dev/null; then
                log_success "API –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ PM2"
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ PM2
                sudo -u $REAL_USER bash -c "
                export NVM_DIR=\"$REAL_HOME/.nvm\"
                [ -s \"\$NVM_DIR/nvm.sh\" ] && \. \"\$NVM_DIR/nvm.sh\"
                pm2 startup
                " 2>/dev/null || log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ PM2"
                
                log_success "API –ø—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ 127.0.0.1:15000"
            else
                log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å API —á–µ—Ä–µ–∑ PM2"
                log_warning "API —Å–µ—Ä–≤–∏—Å –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É"
                log_info "–ú–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å API –ø–æ–∑–∂–µ –∫–æ–º–∞–Ω–¥–æ–π: $PROJECT_NAME-api start"
            fi
        else
            log_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ API –ø—Ä–æ–µ–∫—Ç–∞"
            log_warning "API —Å–µ—Ä–≤–∏—Å –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É"
            log_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –≤ /opt/$PROJECT_NAME-api –∏ —Å–æ–±–µ—Ä–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: $PROJECT_NAME-api build"
        fi
    else
        log_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π API"
        log_warning "API —Å–µ—Ä–≤–∏—Å –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É"
        log_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ package.json –≤ /opt/$PROJECT_NAME-api"
    fi
else
    log_warning "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è nginx-api –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º"
fi

# 10. –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
log_step "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–µ–∑–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º
cat > /usr/local/bin/$PROJECT_NAME << EOF
#!/bin/bash
cd /opt/$PROJECT_NAME
case "\$1" in
    start)   docker compose up -d ;;
    stop)    docker compose down ;;
    restart) docker compose restart ;;
    logs)    docker compose logs -f \${2:-} ;;
    status)  docker compose ps ;;
    *)       echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $PROJECT_NAME {start|stop|restart|logs|status}" ;;
esac
EOF

chmod +x /usr/local/bin/$PROJECT_NAME

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API
cat > /usr/local/bin/$PROJECT_NAME-api << EOF
#!/bin/bash
export NVM_DIR="$REAL_HOME/.nvm"
[ -s "\$NVM_DIR/nvm.sh" ] && \. "\$NVM_DIR/nvm.sh"
cd /opt/$PROJECT_NAME-api
case "\$1" in
    start)   sudo -u $REAL_USER pm2 start $PROJECT_NAME-api ;;
    stop)    sudo -u $REAL_USER pm2 stop $PROJECT_NAME-api ;;
    restart) sudo -u $REAL_USER pm2 restart $PROJECT_NAME-api ;;
    logs)    sudo -u $REAL_USER pm2 logs $PROJECT_NAME-api ;;
    status)  sudo -u $REAL_USER pm2 status ;;
    build)   sudo -u $REAL_USER bash -c "cd /opt/$PROJECT_NAME-api && yarn build" ;;
    *)       echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $PROJECT_NAME-api {start|stop|restart|logs|status|build}" ;;
esac
EOF

chmod +x /usr/local/bin/$PROJECT_NAME-api

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ClickHouse
cat > /usr/local/bin/$PROJECT_NAME-db << 'EOF'
#!/bin/bash
case "$1" in
    logs)    docker exec -it clickhouse-server clickhouse-client --query "SELECT * FROM logs_db.request_logs ORDER BY time DESC LIMIT 100" ;;
    status)  docker exec -it clickhouse-server clickhouse-client --query "SELECT count() as total_requests FROM logs_db.request_logs" ;;
    shell)   docker exec -it clickhouse-server clickhouse-client ;;
    create-table) 
        docker exec -i clickhouse-server clickhouse-client --query "
        CREATE DATABASE IF NOT EXISTS logs_db;
        CREATE TABLE IF NOT EXISTS logs_db.request_logs
        (
            request_id String,
            user String,
            ip String,
            host String,
            uri String,
            method String,
            args String,
            body Nullable(String),
            time DateTime
        ) 
        ENGINE = MergeTree()
        ORDER BY (time, ip, host)
        PARTITION BY toYYYYMM(time)
        TTL time + INTERVAL 30 DAY;"
        echo "–ë–∞–∑–∞ –∏ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω—ã"
        ;;
    *)       echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $PROJECT_NAME-db {logs|status|shell|create-table}" ;;
esac
EOF

chmod +x /usr/local/bin/$PROJECT_NAME-db

log_success "–ö–æ–º–∞–Ω–¥—ã '$PROJECT_NAME', '$PROJECT_NAME-api' –∏ '$PROJECT_NAME-db' —Å–æ–∑–¥–∞–Ω—ã"

# –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
echo
echo -e "${GREEN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${GREEN}‚ïë                    ‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê                   ‚ïë${NC}"
echo -e "${GREEN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
echo

log_success "–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
log_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ($DOCKER_VERSION)"
log_success "NVM, Node.js $TARGET_NODE_VERSION, PM2 –∏ Yarn —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
log_success "Certbot —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
log_success "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–ª—É—á–µ–Ω –¥–ª—è $DOMAIN"
log_success "–§–∞–π—Ä–≤–æ–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
if [ -d "/opt/$PROJECT_NAME" ] && [ -n "$(docker ps -q)" ]; then
    log_success "Nginx reverse proxy –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω"
else
    log_warning "Nginx reverse proxy –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–ø—É—Å–∫–æ–º"
fi

if pgrep -f "$PROJECT_NAME-api" > /dev/null 2>&1; then
    log_success "API –ø—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ 127.0.0.1:15000"
else
    log_warning "API –ø—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)"
fi

if docker ps | grep -q clickhouse; then
    log_success "ClickHouse –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –±–∞–∑–æ–π logs_db"
else
    log_warning "ClickHouse –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"
fi

echo
echo -e "${CYAN}üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
echo -e "  ${YELLOW}$PROJECT_NAME start${NC}       - –∑–∞–ø—É—Å—Ç–∏—Ç—å nginx reverse proxy"
echo -e "  ${YELLOW}$PROJECT_NAME stop${NC}        - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å nginx reverse proxy"
echo -e "  ${YELLOW}$PROJECT_NAME restart${NC}     - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å nginx reverse proxy"
echo -e "  ${YELLOW}$PROJECT_NAME logs${NC}        - –ø–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ nginx"
echo -e "  ${YELLOW}$PROJECT_NAME status${NC}      - —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
echo
echo -e "  ${YELLOW}$PROJECT_NAME-api start${NC}   - –∑–∞–ø—É—Å—Ç–∏—Ç—å API"
echo -e "  ${YELLOW}$PROJECT_NAME-api stop${NC}    - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API"
echo -e "  ${YELLOW}$PROJECT_NAME-api restart${NC} - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å API"
echo -e "  ${YELLOW}$PROJECT_NAME-api logs${NC}    - –ø–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ API"
echo -e "  ${YELLOW}$PROJECT_NAME-api status${NC}  - —Å—Ç–∞—Ç—É—Å PM2 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
echo -e "  ${YELLOW}$PROJECT_NAME-api build${NC}   - –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å API"
echo
echo -e "  ${YELLOW}$PROJECT_NAME-db logs${NC}     - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø—Ä–æ—Å–æ–≤"
echo -e "  ${YELLOW}$PROJECT_NAME-db status${NC}   - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ"
echo -e "  ${YELLOW}$PROJECT_NAME-db shell${NC}    - –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ClickHouse"
echo -e "  ${YELLOW}$PROJECT_NAME-db create-table${NC} - —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∑–∞–Ω–æ–≤–æ"

echo
echo -e "${CYAN}üìù –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:${NC}"
echo -e "  ${BLUE}–ë—ç–∫–µ–Ω–¥:${NC} $BACKEND_SCHEME://$BACKEND_HOST:$BACKEND_PORT"
echo -e "  ${BLUE}SSL Name:${NC} $DOMAIN"
echo -e "  ${BLUE}API:${NC} http://127.0.0.1:15000"
echo -e "  ${BLUE}–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:${NC} /etc/letsencrypt/live/$DOMAIN/"
echo -e "  ${BLUE}–ü—Ä–æ–µ–∫—Ç—ã:${NC} /opt/$PROJECT_NAME (nginx), /opt/$PROJECT_NAME-api (API)"

echo
echo -e "${CYAN}üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
if [ "$CERT_TYPE" = "1" ]; then
    echo -e "  ${BLUE}1.${NC} –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: ${CYAN}https://$DOMAIN${NC} –∏ ${CYAN}https://www.$DOMAIN${NC}"
else
    echo -e "  ${BLUE}1.${NC} –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: ${CYAN}https://$DOMAIN${NC}, ${CYAN}https://api.$DOMAIN${NC}, ${CYAN}https://dev.$DOMAIN${NC}"
fi
echo -e "  ${BLUE}2.${NC} API –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ ${CYAN}http://127.0.0.1:15000${NC}"
echo -e "  ${BLUE}3.${NC} ClickHouse –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: ${CYAN}http://$(curl -s ifconfig.me):8123/play${NC}"

echo
echo -e "${CYAN}üö® –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º:${NC}"
echo -e "  ${BLUE}–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:${NC} docker ps"
echo -e "  ${BLUE}–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ nginx:${NC} $PROJECT_NAME logs nginx"
echo -e "  ${BLUE}–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ API:${NC} $PROJECT_NAME-api logs"
echo -e "  ${BLUE}–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã PM2:${NC} $PROJECT_NAME-api status"
echo -e "  ${BLUE}–ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å API:${NC} $PROJECT_NAME-api build && $PROJECT_NAME-api restart"

echo
log_warning "–ü–µ—Ä–µ–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã docker"

echo
echo -e "${GREEN}üéâ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!${NC}"