lua_shared_dict lua_req 10m;
limit_req_zone $binary_remote_addr zone=req_limit:10m rate=30r/s;

upstream backend {
    server ${BACKEND_HOST}:${BACKEND_PORT} max_fails=3 fail_timeout=10s;
    keepalive 32;
}

# Дефолтный сервер - отклоняем всё неизвестное
server {
    listen 80 default_server;
    listen 443 ssl http2 default_server;

    ssl_certificate     /etc/nginx/certs/fullchain.pem;
    ssl_certificate_key /etc/nginx/certs/privkey.pem;

    return 444;
}

# Редирект с HTTP на HTTPS
server {
    listen 80;
    server_name ${BACKEND_SSL_NAME} *.${BACKEND_SSL_NAME};
    return 301 https://$host$request_uri;
}

# Основной сервер
server {
    listen 443 ssl http2;
    server_name ${BACKEND_SSL_NAME} *.${BACKEND_SSL_NAME};

    ssl_certificate     /etc/nginx/certs/fullchain.pem;
    ssl_certificate_key /etc/nginx/certs/privkey.pem;

    # Заголовки безопасности - добавляем всегда, чтобы избежать дублей
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
   add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' blob: https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https:; font-src 'self' data: https://fonts.gstatic.com; connect-src 'self' https:; media-src 'self'; worker-src 'self' blob:;" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    access_log /var/log/nginx/${BACKEND_SSL_NAME}.access.log;
    error_log  /var/log/nginx/${BACKEND_SSL_NAME}.error.log warn;

    # Локальный API
    location /api/tech/ {
        # CORS заголовки
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;

        if ($request_method = OPTIONS) {
            return 204;
        }

        proxy_pass http://${TECH_API_HOST}:${TECH_API_PORT};
        
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_http_version 1.1;
        proxy_set_header Upgrade    $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # Основное приложение
    location / {
        access_by_lua_file /etc/nginx/lua/access_control.lua;
        
        proxy_pass ${BACKEND_SCHEME}://${BACKEND_HOST}:${BACKEND_PORT};
        
        proxy_ssl_server_name on;
        proxy_ssl_verify     off;
        proxy_ssl_name       ${BACKEND_SSL_NAME};

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_http_version 1.1;
        proxy_set_header Upgrade    $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Убираем заголовки безопасности от бэкенда, чтобы не дублировать
        proxy_hide_header X-Frame-Options;
        proxy_hide_header X-Content-Type-Options;
        proxy_hide_header X-XSS-Protection;
        proxy_hide_header Referrer-Policy;
        proxy_hide_header Content-Security-Policy;
        proxy_hide_header Strict-Transport-Security;
    }
}